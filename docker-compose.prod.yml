version: "3.8"

services:
  resume-generator:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: resume-app-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DOCKERIZED=true
      - TEXLIVE_PATH=/usr/bin/pdflatex
      - TEMP_DIR=/app/temp
      - LOG_LEVEL=info
      - GOOGLE_GENERATIVE_AI_API_KEY=${GOOGLE_GENERATIVE_AI_API_KEY}
    volumes:
      # Only mount data directories for production
      - resume_temp:/app/temp
      - resume_uploads:/app/uploads
      - resume_logs:/app/logs
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - resume-network

  redis:
    image: redis:7-alpine
    container_name: resume-redis-prod
    restart: always
    volumes:
      - redis_data:/data
      - ./redis.conf:/etc/redis.conf:ro
    command: redis-server /etc/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
    networks:
      - resume-network

  nginx:
    image: nginx:alpine
    container_name: resume-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      resume-generator:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.1"
    networks:
      - resume-network

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: resume-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    restart: always
    networks:
      - resume-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: resume-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: always
    networks:
      - resume-network
    profiles:
      - monitoring

volumes:
  resume_temp:
    driver: local
  resume_uploads:
    driver: local
  resume_logs:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  resume-network:
    driver: bridge
